#!/usr/bin/env node

/**
 * Script pour cr√©er un utilisateur de test dans MongoDB
 * Usage: node scripts/create-test-user.js
 */

const fs = require('fs')
const path = require('path')
const { MongoClient, ServerApiVersion } = require('mongodb')
const crypto = require('crypto')

// Charger les variables d'environnement depuis .env.local
const envPath = path.join(__dirname, '..', '.env.local')
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8')
  envContent.split('\n').forEach(line => {
    const match = line.match(/^([^=:#]+)=(.*)$/)
    if (match) {
      const key = match[1].trim()
      const value = match[2].trim()
      if (!process.env[key]) {
        process.env[key] = value
      }
    }
  })
}

const uri = `mongodb+srv://${process.env.MONGODB_USERNAME}:${process.env.MONGODB_PASSWORD}@${process.env.MONGODB_HOST}/${process.env.MONGODB_DATABASE_NAME}${process.env.MONGODB_PARAMS}&appName=${process.env.MONGODB_APP_NAME}`
const dbName = process.env.MONGODB_DATABASE_NAME || 'tamagocho-db'

const client = new MongoClient(uri, {
  serverSelectionTimeoutMS: 5000,
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true
  }
})

/**
 * Hache un mot de passe avec bcrypt-like (simple pour test)
 */
function hashPassword (password) {
  return crypto.createHash('sha256').update(password).digest('hex')
}

async function createTestUser () {
  try {
    await client.connect()
    console.log('‚úÖ Connect√© √† MongoDB\n')

    const db = client.db(dbName)
    const usersCollection = db.collection('user')

    // Donn√©es de l'utilisateur test
    const testEmail = 'test@tamagocho.com'
    const testPassword = 'Test123456!'
    const testName = 'Test User'

    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await usersCollection.findOne({ email: testEmail })
    if (existingUser !== null) {
      console.log('‚ö†Ô∏è  L\'utilisateur test existe d√©j√†')
      console.log('üìß Email:', testEmail)
      console.log('üÜî ID:', existingUser._id)
      console.log('\nüí° Vous pouvez vous connecter avec:')
      console.log('   Email:', testEmail)
      console.log('   Password:', testPassword)
      return
    }

    // Cr√©er l'utilisateur
    const userId = crypto.randomUUID()
    const now = new Date()

    const user = {
      id: userId,
      email: testEmail,
      emailVerified: false,
      name: testName,
      createdAt: now,
      updatedAt: now,
      image: null
    }

    await usersCollection.insertOne(user)
    console.log('‚úÖ Utilisateur test cr√©√© avec succ√®s!')
    console.log('üìß Email:', testEmail)
    console.log('üë§ Nom:', testName)
    console.log('üÜî ID:', userId)

    // Cr√©er un account pour l'authentification email/password
    const accountsCollection = db.collection('account')
    const account = {
      id: crypto.randomUUID(),
      userId,
      accountId: testEmail,
      providerId: 'credential',
      password: hashPassword(testPassword), // Note: BetterAuth utilise bcrypt, ceci est juste pour test
      createdAt: now,
      updatedAt: now
    }

    await accountsCollection.insertOne(account)
    console.log('‚úÖ Compte d\'authentification cr√©√©')

    console.log('\nüéâ Tout est pr√™t!')
    console.log('\nüí° Connectez-vous avec:')
    console.log('   Email:', testEmail)
    console.log('   Password:', testPassword)
    console.log('\n‚ö†Ô∏è  IMPORTANT: Ce mot de passe est hash√© avec SHA256, pas bcrypt.')
    console.log('   La connexion pourrait ne pas fonctionner si BetterAuth utilise bcrypt.')
    console.log('   Utilisez plut√¥t le formulaire d\'inscription pour cr√©er un vrai utilisateur.')
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await client.close()
  }
}

createTestUser()
